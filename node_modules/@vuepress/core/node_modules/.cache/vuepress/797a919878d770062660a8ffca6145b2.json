{"remainingRequest":"/Users/hrslab/Documents/GitHub/prjdoc/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/hrslab/Documents/GitHub/prjdoc/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/hrslab/Documents/GitHub/prjdoc/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/hrslab/Documents/GitHub/prjdoc/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/hrslab/Documents/GitHub/prjdoc/docs/termandcond.md?vue&type=template&id=0d7911b0&","dependencies":[{"path":"/Users/hrslab/Documents/GitHub/prjdoc/docs/termandcond.md","mtime":1625499984092},{"path":"/Users/hrslab/Documents/GitHub/prjdoc/node_modules/cache-loader/dist/cjs.js","mtime":1625499997609},{"path":"/Users/hrslab/Documents/GitHub/prjdoc/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1625500029488},{"path":"/Users/hrslab/Documents/GitHub/prjdoc/node_modules/cache-loader/dist/cjs.js","mtime":1625499997609},{"path":"/Users/hrslab/Documents/GitHub/prjdoc/node_modules/vue-loader/lib/index.js","mtime":1625500029488},{"path":"/Users/hrslab/Documents/GitHub/prjdoc/node_modules/@vuepress/markdown-loader/index.js","mtime":1625499990443}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}