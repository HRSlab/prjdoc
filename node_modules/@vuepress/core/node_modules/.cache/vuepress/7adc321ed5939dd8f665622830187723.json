{"remainingRequest":"/Users/hrslab/Documents/GitHub/prjdoc/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/hrslab/Documents/GitHub/prjdoc/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/hrslab/Documents/GitHub/prjdoc/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/hrslab/Documents/GitHub/prjdoc/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/hrslab/Documents/GitHub/prjdoc/docs/proposal.md?vue&type=template&id=69581f96&","dependencies":[{"path":"/Users/hrslab/Documents/GitHub/prjdoc/docs/proposal.md","mtime":1624736447784},{"path":"/Users/hrslab/Documents/GitHub/prjdoc/node_modules/cache-loader/dist/cjs.js","mtime":1624725152320},{"path":"/Users/hrslab/Documents/GitHub/prjdoc/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1624725283053},{"path":"/Users/hrslab/Documents/GitHub/prjdoc/node_modules/cache-loader/dist/cjs.js","mtime":1624725152320},{"path":"/Users/hrslab/Documents/GitHub/prjdoc/node_modules/vue-loader/lib/index.js","mtime":1624736598046},{"path":"/Users/hrslab/Documents/GitHub/prjdoc/node_modules/@vuepress/markdown-loader/index.js","mtime":1624725130289}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJwcm9wb3N0YS1jb21tZXJjaWFsZSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjcHJvcG9zdGEtY29tbWVyY2lhbGUiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBQcm9wb3N0YSBDb21tZXJjaWFsZSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJIZWFkZXIgZC1mbGV4IGZsZXgtanVzdGlmeS1iZXR3ZWVuIiB9LCBbCiAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiSGVhZGVyLWl0ZW0gdGV4dC1jZW50ZXIgZjYiIH0sIFsKICAgICAgICAgIF92bS5fdigiIERhdGE6ICIgKyBfdm0uX3MoX3ZtLiRmcm9udG1hdHRlci5zdGFydGRhdGUpICsgIiAiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogIkhlYWRlci1pdGVtIHRleHQtY2VudGVyIGY2IiB9LCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgT2ZmZXJ0YSByZWRhdHRhIGRhOiAiICsgX3ZtLl9zKF92bS4kZnJvbnRtYXR0ZXIubWFuYWdlcikgKyAiICIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJIZWFkZXItaXRlbSB0ZXh0LWNlbnRlciBmNiIgfSwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIE9mZmVydGEgdmFsaWRhIGZpbm8gYWw6ICAiICsKICAgICAgICAgICAgICBfdm0uX3MoX3ZtLiRmcm9udG1hdHRlci5lbmRkYXRlKSArCiAgICAgICAgICAgICAgIiAiCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJiciIpLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJTcGV0dC5sZSAiICsgX3ZtLl9zKF92bS4kZnJvbnRtYXR0ZXIuY2xpZW50KSArICIsIildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJHcmF6aWUgcGVyIGF2ZXJjaSBjb250YXR0YXRvLlxuUXVpIExlIHByZXNlbnRpYW1vIHVuYSBzdGltYSBwcmVsaW1pbmFyZSBwZXIgaWwgcHJvZ2V0dG8gIgogICAgICAgICksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoX3ZtLl9zKF92bS4kZnJvbnRtYXR0ZXIucHJvamVjdG5hbWUpKV0pLAogICAgICAgIF92bS5fdigiLiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkluIGJhc2UgYWxsZSBpbmZvcm1hemlvbmkgY2hlIGNpIGhhaSBmb3JuaXRvIGlsIHR1byBwcm9nZXR0byBwb3RyZWJiZSByaWNoaWVkZXJlIHVuIGludmVzdGltZW50byBjaGUgdmEgZGFcbiIKICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgInNwYW4iLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogIkxhYmVsIGJnLWdyZWVuIiwgYXR0cnM6IHsgdGl0bGU6ICJtaW5pbXVtIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KF92bS5fcyhfdm0uJGZyb250bWF0dGVyLm1pbnByaWNlKSldCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBhICIpLAogICAgICAgIF9jKAogICAgICAgICAgInNwYW4iLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogIkxhYmVsIGJnLXJlZCIsIGF0dHJzOiB7IHRpdGxlOiAibWF4aW11bSIgfSB9LAogICAgICAgICAgW192bS5fdihfdm0uX3MoX3ZtLiRmcm9udG1hdHRlci5tYXhwcmljZSkpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgLiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlNlIGxhIGZvcmJpY2UgZGVsbCdpbnZlc3RpbWVudG8gTGUgc2VtYnJhIHRyb3BwbyBhbXBpYSDDqCBwZXJjaMOoIG5vbiBhYmJpYW1vIGFiYmFzdGFuemEgaW5mb3JtYXppb25pIHBlciBwcm9jZWRlcmUgYWQgdW5hIHN0aW1hIHBpw7kgYWNjdXJhdGEuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVW5hIHN0aW1hIHBpw7kgcHJlY2lzYSBkZWxsJ2ludmVzdGltZW50byB0b3RhbGUgbGEgcG90cmVtbyBkZWZpbmlyZSBkb3BvIGF2ZXIgdmFsdXRhdG8gbmVsIGRldHRhZ2xpbyBsZSBjYXJhdHRlcmlzdGljaGUgZGVsIHByb2RvdHRvLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkEgdGl0b2xvIGdlbmVyYWxlLCByaXBvcnRpYW1vIGEgc2VndWlyZSBlc2VtcGkgZGkgZHVlIGZhc2kgZGVsbCdldmxvdmVyc2kgZGkgdW4gcHJvZ2V0dG8uXG5MZSBzdGltZSBxdWkgcmlwcm9kb3R0ZSBzaSByaWZlcmlzY29ubyBhZCBpbmNyZW1lbnRpIGRlbGxhIGR1cmF0YSBtZWRpYSBkaSAyIHNldHRpbWFuZSB1dGlsaXp6YW5kbyBsYSBtZXRvZG9sb2dpYSBBZ2lsZSBTY3J1bS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJRdWVzdGEgbWV0b2RvbG9naWEgZ2FyYW50aXNjZSB1bmEgdHJhc3BhcmVuemEgZWQgdW4gY29udHJvbGxvIGFzc29sdXRvIHN1bCBwcm9nZXR0byBjb2xsYWJvcmFuZG8gYXR0aXZhbWVudGUgYWxsYSByZWFsaXp6YXppb25lIGRlbCBwcm9kb3R0by5cblBlciBzYXBlcm5lIGRpIHBpw7kgc3VsbGEgbWV0b2RvbG9naWEgU2NydW0gcHVvaSAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoIlJvdXRlckxpbmsiLCB7IGF0dHJzOiB7IHRvOiAiL3NjcnVtLyIgfSB9LCBbCiAgICAgICAgICAgIF92bS5fdigibGVnZ2VyZSBsYSBndWlkYSIpCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiLiIpCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiZXNlbXBpIiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNlc2VtcGkiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiBFc2VtcGkiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJhbmFsaXNpLXByZWxpbWluYXJlLWUtdXgtZGVzaWduIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNhbmFsaXNpLXByZWxpbWluYXJlLWUtdXgtZGVzaWduIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQW5hbGlzaSBQcmVsaW1pbmFyZSBlIFVYIERlc2lnbiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJCb3ggYm94LXNoYWRvdyBteS00IiB9LCBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJCb3gtaGVhZGVyIiB9LCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiZjYtbGlnaHQgdGV4dC1zbWFsbCBmbG9hdC1sZWZ0IiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJTcHJpbnQiKSwKICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJDb3VudGVyIG1sLTEiIH0sIFtfdm0uX3YoIjEiKV0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiZjYtbGlnaHQgIHRleHQtc21hbGwgZmxvYXQtcmlnaHQiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIkR1cmF0YSIpLAogICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogIkNvdW50ZXIgbWwtMSIgfSwgW192bS5fdigiMXNldHQiKV0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiQm94LWJvZHkgcHktNCIgfSwgWwogICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1zbWFsbCB0ZXh0LWdyYXkgbXItMiIgfSwgWwogICAgICAgICAgICBfdm0uX3YoIlByb2R1Y3QgTWFuYWdlciIpCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJzcGFuIiwKICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIlByb2dyZXNzIiwgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICIzMDBweCIgfSB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYmctZ3JlZW4iLAogICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICI4MCUiIH0KICAgICAgICAgICAgICB9KQogICAgICAgICAgICBdCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXNtYWxsIHRleHQtZ3JheSBtci0yIiB9LCBbCiAgICAgICAgICAgIF92bS5fdigiUHJvamVjdCBNYW5hZ2VyIikKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiUHJvZ3Jlc3MiLCBzdGF0aWNTdHlsZTogeyB3aWR0aDogIjMwMHB4IiB9IH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJiZy1ncmVlbiIsCiAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyB3aWR0aDogIjMwJSIgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInRleHQtc21hbGwgdGV4dC1ncmF5IG1yLTIiIH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJVWCBEZXNpZ25lciIpCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJzcGFuIiwKICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIlByb2dyZXNzIiwgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICIzMDBweCIgfSB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYmctZ3JlZW4iLAogICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICIxMDAlIiB9CiAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1zbWFsbCB0ZXh0LWdyYXkgbXItMiIgfSwgWwogICAgICAgICAgICBfdm0uX3YoIlVJIERlc2lnbmVyIikKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiUHJvZ3Jlc3MiLCBzdGF0aWNTdHlsZTogeyB3aWR0aDogIjMwMHB4IiB9IH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJiZy1ncmVlbiIsCiAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyB3aWR0aDogIjIwJSIgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInRleHQtc21hbGwgdGV4dC1ncmF5IG1yLTIiIH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJTb3dmdHdhcmUgRW5naW5lZXIiKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAic3BhbiIsCiAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJQcm9ncmVzcyIsIHN0YXRpY1N0eWxlOiB7IHdpZHRoOiAiMzAwcHgiIH0gfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImJnLWdyZWVuIiwKICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IHdpZHRoOiAiMTAlIiB9CiAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1zbWFsbCB0ZXh0LWdyYXkgbXItMiIgfSwgWwogICAgICAgICAgICBfdm0uX3YoIlFBIEVuZ2luZWVyIikKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiUHJvZ3Jlc3MiLCBzdGF0aWNTdHlsZTogeyB3aWR0aDogIjMwMHB4IiB9IH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJiZy1ncmVlbiIsCiAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyB3aWR0aDogIjE1JSIgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0KICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIkJveC1mb290ZXIgdGV4dC1yaWdodCIgfSwgWwogICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiTGFiZWwgTGFiZWwtLW91dGxpbmUiIH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJUb3RhbGU6ICDigqwgOTI5LDk3IikKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAicCIsCiAgICAgICAgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiUXVlc3RhIGZhc2UgcHJlbGltaW5hcmUgdmFyaWEgZGEgY2FzbyBhIGNhc28sIHF1aSB1biBlc2VtcGlvIGRpIHVuIHBpY2NvbG8gcHJvZ2V0dG8gcGVyIHVuIHNpdG8gaW50ZXJuZXQgcGVyc29uYWxpenphdG8sIGRvdmUgbW9sdGUgZGVsbGUgaW5mb3JtYXppb25pIGVyYW5vIGdpw6AgcHJlc2VudGkgbmVsIHNpdG8gcHJlY2VkZW50aSBlIG5lbGxhIGRvY3VtZW50YXppb25lIGF6aWVuZGFsZS4gRHVyYW50ZSBxdWVzdG8gcHJpbW8gIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJUZXJtIiwgeyBhdHRyczogeyB0ZXJtOiAic3ByaW50IiB9IH0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIGxhdm9yZXJlbW8gYSBzdHJldHRvIGNvbnRhdHRvIGNvbiB0ZSBlZCBpbCB0dW8gdGVhbSBwZXIgcHJlcGFyZSBsZSAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoIlRlcm0iLCB7IGF0dHJzOiB7IHRlcm06ICJ1c2VyX3N0b3J5IiB9IH0pLAogICAgICAgICAgX3ZtLl92KCIgY2hlIHNhcmFubm8gaWwgcHJpbW8gc3RlcCBwZXIgbG8gc3ZpbHVwcG8gZGVsbGUgIiksCiAgICAgICAgICBfYygiVGVybSIsIHsgYXR0cnM6IHsgdGVybTogImZlYXR1cmUiLCBzaG93OiAiZmVhdHVyZXMiIH0gfSksCiAgICAgICAgICBfdm0uX3YoIi4iKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlF1ZXN0byBwcmltbyBwYXNzbyBwdcOyIGR1cmFyZSBkYSB1biBtaW5pbW8gZGkgMSBzZXR0aW1hbmEgYWQgb2x0cmUgNiBtZXNpIHBlciBsbyBzdmlsdXBwbyBkaSBhcHBsaWNhemlvbmkgaW5ub3ZhdGl2ZSBlIGNvbXBsZXNzZS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJEdXJhbnRlIHF1ZXN0YSBwcmltYSBwYXJ0ZSBkZWwgcHJvZ2V0dG8gc2kgcG9zc29ubyBhbmNoZSBzdm9sZ2VyZSB0dXR0ZSBxdWVsbGUgYXR0aXZpdMOgIGNoZSByaWNhZG9ubyBzb3R0byBsYSBjYXRlZ29yaWEgZGVsbGEgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJUZXJtIiwgeyBhdHRyczogeyB0ZXJtOiAiVVhfRGVzaWduIiwgc2hvdzogIlVzZXJfRXhwZXJpZW5jZSIgfSB9KSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBlIGNvbXByZW5kb25vIHJpY2VyY2EsIHByb2dldHRhemlvbmUsIGUgYXJjaGl0ZXR0dXJhIGRlbGwnaW5mb3JtYXppb25lLiBQb3Nzb25vIHZhcmlhcmUgY29zaWRlcmV2b2xlbXRuZSBpbiBiYXNlIGFsIHByb2dldHRvLiBJbiBiYXNlIGFsIGNhc28gc3BlY2lmaWNvIGdsaSBzdHJ1bWVudGkgY2hlIGFuZHJlbW8gYWQgdXRpbGl6emFyZSBzb25vOiIKICAgICAgICAgICkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIHsgc3RhdGljQ2xhc3M6ICJjb250YWlucy10YXNrLWxpc3QiIH0sIFsKICAgICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAidGFzay1saXN0LWl0ZW0iIH0sIFsKICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ0YXNrLWxpc3QtaXRlbS1jaGVja2JveCIsCiAgICAgICAgICAgIGF0dHJzOiB7IGNoZWNrZWQ6ICIiLCBkaXNhYmxlZDogIiIsIHR5cGU6ICJjaGVja2JveCIgfQogICAgICAgICAgfSksCiAgICAgICAgICBfdm0uX3YoIiBDYXJkIFNvcnRpbmciKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJ0YXNrLWxpc3QtaXRlbSIgfSwgWwogICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICBzdGF0aWNDbGFzczogInRhc2stbGlzdC1pdGVtLWNoZWNrYm94IiwKICAgICAgICAgICAgYXR0cnM6IHsgY2hlY2tlZDogIiIsIGRpc2FibGVkOiAiIiwgdHlwZTogImNoZWNrYm94IiB9CiAgICAgICAgICB9KSwKICAgICAgICAgIF92bS5fdigiIFRyZWUgdGVzdGluZyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNDbGFzczogInRhc2stbGlzdC1pdGVtIiB9LCBbCiAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidGFzay1saXN0LWl0ZW0tY2hlY2tib3giLAogICAgICAgICAgICBhdHRyczogeyBjaGVja2VkOiAiIiwgZGlzYWJsZWQ6ICIiLCB0eXBlOiAiY2hlY2tib3giIH0KICAgICAgICAgIH0pLAogICAgICAgICAgX3ZtLl92KCIgRmlyc3QtY2xpY2sgdGVzdGluZyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNDbGFzczogInRhc2stbGlzdC1pdGVtIiB9LCBbCiAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidGFzay1saXN0LWl0ZW0tY2hlY2tib3giLAogICAgICAgICAgICBhdHRyczogeyBjaGVja2VkOiAiIiwgZGlzYWJsZWQ6ICIiLCB0eXBlOiAiY2hlY2tib3giIH0KICAgICAgICAgIH0pLAogICAgICAgICAgX3ZtLl92KCIgT25saW5lIHN1cnZleXMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJ0YXNrLWxpc3QtaXRlbSIgfSwgWwogICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICBzdGF0aWNDbGFzczogInRhc2stbGlzdC1pdGVtLWNoZWNrYm94IiwKICAgICAgICAgICAgYXR0cnM6IHsgY2hlY2tlZDogIiIsIGRpc2FibGVkOiAiIiwgdHlwZTogImNoZWNrYm94IiB9CiAgICAgICAgICB9KSwKICAgICAgICAgIF92bS5fdigiIFF1YWxpdGF0aXZlIHJlc2VhcmNoIikKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY3VzdG9tLWJsb2NrIHRpcCIgfSwgWwogICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImN1c3RvbS1ibG9jay10aXRsZSIgfSwgWwogICAgICAgICAgX3ZtLl92KCJQYXJ0ZWNpcGFudGkgYWxsZSByaWNlcmNoZSIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJQb3NzaWFtbyBvY2N1cGFyY2kgZGVsbGEgcmljZXJjYSBkZWkgcGFydGVjaXBhbnRpIGFpIHRlc3QgZSBxdWVzdGlvbmFyaSBjb24gdW4gcGFuZWwgZGkgNTArIG1pbGlvbmkgZSBkaXZlcnNlIG9wemlvbmkgZGkgc2VnbWVudGF6aW9uZSBpbiBwacO5IGRpIDgwIGxpbmd1ZSBkaXZlcnNlLiBJIGNvc3RpIHNvbm8gdW5hIHRhbnR1bSBlIHBlciBwcm9nZXR0byBlIHNpIGJhc2FubyBzdWxsYSBjb21wbGVzc2l0w6AgZSBxdWFudGl0w6AgbmVjZXNzYXJpYS4gSW4gbWVkaWEgMTUsMjDigqwgcGVyIHRlc3QgY29tcGxldGF0by4gIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoIkNvbnRhdHRhY2kgcGVyIG1hZ2dpb3JpIGluZm9ybWF6aW9uaSIpXSksCiAgICAgICAgICBfdm0uX3YoIi4iKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImRlc2lnbi1lLXByb3RvdGlwYXppb25lIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNkZXNpZ24tZS1wcm90b3RpcGF6aW9uZSIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIERlc2lnbiBlIFByb3RvdGlwYXppb25lIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIkJveCBib3gtc2hhZG93IG15LTQiIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIkJveC1oZWFkZXIiIH0sIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJmNi1saWdodCB0ZXh0LXNtYWxsIGZsb2F0LWxlZnQiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIlNwcmludCIpLAogICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogIkNvdW50ZXIgbWwtMSIgfSwgW192bS5fdigiMiIpXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJmNi1saWdodCAgdGV4dC1zbWFsbCBmbG9hdC1yaWdodCIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigiRHVyYXRhIiksCiAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiQ291bnRlciBtbC0xIiB9LCBbX3ZtLl92KCIyc2V0dCIpXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJCb3gtYm9keSBweS00IiB9LCBbCiAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXNtYWxsIHRleHQtZ3JheSBtci0yIiB9LCBbCiAgICAgICAgICAgIF92bS5fdigiUHJvZHVjdCBNYW5hZ2VyIikKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiUHJvZ3Jlc3MiLCBzdGF0aWNTdHlsZTogeyB3aWR0aDogIjMwMHB4IiB9IH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJiZy1ncmVlbiIsCiAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyB3aWR0aDogIjIwJSIgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInRleHQtc21hbGwgdGV4dC1ncmF5IG1yLTIiIH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJQcm9qZWN0IE1hbmFnZXIiKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAic3BhbiIsCiAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJQcm9ncmVzcyIsIHN0YXRpY1N0eWxlOiB7IHdpZHRoOiAiMzAwcHgiIH0gfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImJnLWdyZWVuIiwKICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IHdpZHRoOiAiNTAlIiB9CiAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1zbWFsbCB0ZXh0LWdyYXkgbXItMiIgfSwgWwogICAgICAgICAgICBfdm0uX3YoIlVYIERlc2lnbmVyIikKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiUHJvZ3Jlc3MiLCBzdGF0aWNTdHlsZTogeyB3aWR0aDogIjMwMHB4IiB9IH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJiZy1ncmVlbiIsCiAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyB3aWR0aDogIjIwJSIgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInRleHQtc21hbGwgdGV4dC1ncmF5IG1yLTIiIH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJVSSBEZXNpZ25lciIpCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJzcGFuIiwKICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIlByb2dyZXNzIiwgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICIzMDBweCIgfSB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYmctZ3JlZW4iLAogICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICIxMDAlIiB9CiAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1zbWFsbCB0ZXh0LWdyYXkgbXItMiIgfSwgWwogICAgICAgICAgICBfdm0uX3YoIlNvd2Z0d2FyZSBFbmdpbmVlciIpCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJzcGFuIiwKICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIlByb2dyZXNzIiwgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICIzMDBweCIgfSB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYmctZ3JlZW4iLAogICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICI1JSIgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInRleHQtc21hbGwgdGV4dC1ncmF5IG1yLTIiIH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJRQSBFbmdpbmVlciIpCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJzcGFuIiwKICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIlByb2dyZXNzIiwgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICIzMDBweCIgfSB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYmctZ3JlZW4iLAogICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICIxNSUiIH0KICAgICAgICAgICAgICB9KQogICAgICAgICAgICBdCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIkJveC1mb290ZXIgdGV4dC1yaWdodCIgfSwgWwogICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJMYWJlbCBMYWJlbC0tb3V0bGluZSIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigiVG90YWxlOiAgIOKCrCAxLjk2MCw4OCIpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgInAiLAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIk5lbGwnIGVzZW1waW8gc29wcmEgbGEgZmFzZSBkaSBkaXNlZ25vIHRlY25pY28gZSBwcm90b3RpcGF6aW9uZS4gSW4gcXVlc3RvIGNhc28gbGEgZHVyYXRhIGRlbGxvICIKICAgICAgICAgICksCiAgICAgICAgICBfYygiVGVybSIsIHsgYXR0cnM6IHsgdGVybTogInNwcmludCIgfSB9KSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiDDqCBkaSAyIHNldHRpbWFuZS4gQ2kgb2NjdXBlcmVtbyBkaSBwcm9kdXJyZSBpbCBkZXNpZ24gYWQgYWx0YSBkZWZpbml6aW9uZSwgZGVmaW5pcmUgbG8gc2NoZW1hIGRlaSBjb2xvcmksIGxlIGNhcmF0dGVyaXN0aWNoZSBkaSB0dXR0aSBpIGNvbXBvbmVudGkgY29tZSBpIHB1bHNhbnRpLCBpIG1lbnUsIGV0Yy4uIEluIGJhc2UgYWxsZSBuZWNlc3NpdMOgIHBvc3NpYW1vIGFuY2hlIGVzZWd1aXJlIHVuYSBwcm90b3RpcGF6aW9uZSBjb21wbGV0YSwgdXRpbGUgbmVsIGNhc28gZGkgcHJlc2VudGF6aW9uZSBhIHBvdGVuemlhbGkgaW52ZXN0aXRvcmkuIElub2x0cmUgaSBwcm9ncmFtbWF0b3JpIGluemllcmFubm8gYSBmYXJlIGkgc2V0dXAgcHJlbGltaW5hcmksIGNyZWFyZSBpIGRhdGFiYXNlLCBpbXBvc3RhcmUgbCdhbWJpZW50ZSBkaSBzdmlsdXBwbywgdmFsdXRhcmUgZXZlbnR1YWxpIEFQSXMgZSBjb2xsZWdhbWVudGkgYSBzZXJ2aXppIGRpIHRlcnplIHBhcnRpLiIKICAgICAgICAgICkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJoNCIsCiAgICAgICAgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgaWQ6CiAgICAgICAgICAgICAgImVzZW1waW8tZGktY2Fzby1yZWFsZS1wZXItbG8tc3ZpbHVwcG8tZGktdW5hLWFwcGxpY2F6aW9uZS1tb2JpbGUtaWJyaWRhLW12cCIKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAiI2VzZW1waW8tZGktY2Fzby1yZWFsZS1wZXItbG8tc3ZpbHVwcG8tZGktdW5hLWFwcGxpY2F6aW9uZS1tb2JpbGUtaWJyaWRhLW12cCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgRXNlbXBpbyBkaSBjYXNvIHJlYWxlIHBlciBsbyBzdmlsdXBwbyBkaSB1bmEgYXBwbGljYXppb25lIG1vYmlsZSBpYnJpZGEgTVZQOiIKICAgICAgICAgICkKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIkJveCBib3gtc2hhZG93IG15LTQiIH0sIFsKICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAiQm94LXJvdyIgfSwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAic3BhbiIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJMYWJlbCBMYWJlbC0tZ3JheSBmbG9hdC1yaWdodCIsCiAgICAgICAgICAgICAgICBhdHRyczogeyB0aXRsZTogIkxhYmVsOiBkYXJrIGdyYXkgbGFiZWwiIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIlNwcmludCAxIildCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXNtYWxsIHRleHQtZ3JheSIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigi4oKsIDIuMjE2LDMwIChQaWFuaWZpY2F6aW9uZSkiKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJCb3gtcm93IiB9LCBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJzcGFuIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIkxhYmVsIExhYmVsLS1ncmF5IGZsb2F0LXJpZ2h0IiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IHRpdGxlOiAiTGFiZWw6IGRhcmsgZ3JheSBsYWJlbCIgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiU3ByaW50IDIiKV0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInRleHQtc21hbGwgdGV4dC1ncmF5IiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCLigqwgMS43MzAsMTMgKFByb2dldHRhemlvbmUpIikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAiQm94LXJvdyIgfSwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAic3BhbiIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJMYWJlbCBMYWJlbC0tZ3JheSBmbG9hdC1yaWdodCIsCiAgICAgICAgICAgICAgICBhdHRyczogeyB0aXRsZTogIkxhYmVsOiBkYXJrIGdyYXkgbGFiZWwiIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIlNwcmludCAzIildCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXNtYWxsIHRleHQtZ3JheSIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigi4oKsIDIuMTY1LDQ4IChTdmlsdXBwbykiKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJCb3gtcm93IiB9LCBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJzcGFuIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIkxhYmVsIExhYmVsLS1ncmF5IGZsb2F0LXJpZ2h0IiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IHRpdGxlOiAiTGFiZWw6IGRhcmsgZ3JheSBsYWJlbCIgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiU3ByaW50IDQiKV0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInRleHQtc21hbGwgdGV4dC1ncmF5IiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCLigqwgMi4xOTksMDcgKFF1YWxpdMOgIGUgTGFuY2lvKSIpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiQm94LWZvb3RlciBteS0yIiB9LCBbCiAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJMYWJlbCBMYWJlbC0tb3V0bGluZSIgfSwgWwogICAgICAgICAgICBfdm0uX3YoIlRvdGFsZTogICDigqwgOC4zMTAsOTgiKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogIkxhYmVsIExhYmVsLS1vdXRsaW5lIGZsb2F0LXJpZ2h0IiB9LCBbCiAgICAgICAgICAgIF92bS5fdigiTWFudXRlbnppb25lIE1lbnNpbGU6IOKCrCAxLjY2MiwyMCIpCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogInByb2Nlc3NvLWRpLXN2aWx1cHBvIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNwcm9jZXNzby1kaS1zdmlsdXBwbyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFByb2Nlc3NvIGRpIFN2aWx1cHBvIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiU29saXRhbWVudGUgYWJiaWFtbyBiaXNvZ25vIGRpIDE2LTIwIHNldHRpbWFuZSBwZXIgZmluaXJlIGNvbXBsZXRhbWVudGUgdW5hIG1vYmlsZSBhcHAuXG5JbnZpYW1vIHBlcmlvZGljaSBhZ2dpb3JuYW1lbnRpIHBlciBvZ25pIGZhc2UgZGkgcHJvZ2V0dG8gZSBub3RpZmljaGlhbW8gZ2lvcm5hbG1lbnRlIGwnYXZhbnphbWVudG8gZGVpIGxhdm9yaS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJmYXNpLWRpLXN2aWx1cHBvIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNmYXNpLWRpLXN2aWx1cHBvIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgRmFzaSBkaSBTdmlsdXBwbyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiQ291bnRlciBiZy1ncmVlbiB0ZXh0LXdoaXRlIiB9LCBbCiAgICAgICAgICBfdm0uX3YoIkluaXppbyIpCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIlRpbWVsaW5lSXRlbSBUaW1lbGluZUl0ZW0tLWNvbmRlbnNlZCIgfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiVGltZWxpbmVJdGVtLWJhZGdlIiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgInN2ZyIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm9jdGljb24gb2N0aWNvbi1naXQtY29tbWl0IiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgdmlld0JveDogIjAgMCAxNCAxNiIsCiAgICAgICAgICAgICAgICB2ZXJzaW9uOiAiMS4xIiwKICAgICAgICAgICAgICAgIHdpZHRoOiAiMTQiLAogICAgICAgICAgICAgICAgaGVpZ2h0OiAiMTYiLAogICAgICAgICAgICAgICAgImFyaWEtaGlkZGVuIjogInRydWUiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAiZmlsbC1ydWxlIjogImV2ZW5vZGQiLAogICAgICAgICAgICAgICAgICBkOgogICAgICAgICAgICAgICAgICAgICJNMTAuODYgN2MtLjQ1LTEuNzItMi0zLTMuODYtMy0xLjg2IDAtMy40MSAxLjI4LTMuODYgM0gwdjJoMy4xNGMuNDUgMS43MiAyIDMgMy44NiAzIDEuODYgMCAzLjQxLTEuMjggMy44Ni0zSDE0VjdoLTMuMTR6TTcgMTAuMmMtMS4yMiAwLTIuMi0uOTgtMi4yLTIuMiAwLTEuMjIuOTgtMi4yIDIuMi0yLjIgMS4yMiAwIDIuMi45OCAyLjIgMi4yIDAgMS4yMi0uOTggMi4yLTIuMiAyLjJ6IgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0KICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIlRpbWVsaW5lSXRlbS1ib2R5IiB9LCBbCiAgICAgICAgICBfdm0uX3YoIlxuMS4gRGlzY292ZXJ5IGUgcHJlc2VudGF6aW9uZSBvZmZlcnRhIGZvcm1hbGUuXG4iKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJUaW1lbGluZUl0ZW0gVGltZWxpbmVJdGVtLS1jb25kZW5zZWQiIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIlRpbWVsaW5lSXRlbS1iYWRnZSIgfSwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJzdmciLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJvY3RpY29uIG9jdGljb24tZ2l0LWNvbW1pdCIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHZpZXdCb3g6ICIwIDAgMTQgMTYiLAogICAgICAgICAgICAgICAgdmVyc2lvbjogIjEuMSIsCiAgICAgICAgICAgICAgICB3aWR0aDogIjE0IiwKICAgICAgICAgICAgICAgIGhlaWdodDogIjE2IiwKICAgICAgICAgICAgICAgICJhcmlhLWhpZGRlbiI6ICJ0cnVlIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJwYXRoIiwgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgImZpbGwtcnVsZSI6ICJldmVub2RkIiwKICAgICAgICAgICAgICAgICAgZDoKICAgICAgICAgICAgICAgICAgICAiTTEwLjg2IDdjLS40NS0xLjcyLTItMy0zLjg2LTMtMS44NiAwLTMuNDEgMS4yOC0zLjg2IDNIMHYyaDMuMTRjLjQ1IDEuNzIgMiAzIDMuODYgMyAxLjg2IDAgMy40MS0xLjI4IDMuODYtM0gxNFY3aC0zLjE0ek03IDEwLjJjLTEuMjIgMC0yLjItLjk4LTIuMi0yLjIgMC0xLjIyLjk4LTIuMiAyLjItMi4yIDEuMjIgMCAyLjIuOTggMi4yIDIuMiAwIDEuMjItLjk4IDIuMi0yLjIgMi4yeiIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KQogICAgICAgICAgICBdCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJUaW1lbGluZUl0ZW0tYm9keSIgfSwgWwogICAgICAgICAgX3ZtLl92KCJcbjIuIEZpcm1hIGRlbCBDb250cmF0dG8gZSByaXVuaW9uZSBJbml6aWFsZS5cbiIpCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIlRpbWVsaW5lSXRlbSBUaW1lbGluZUl0ZW0tLWNvbmRlbnNlZCIgfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiVGltZWxpbmVJdGVtLWJhZGdlIiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgInN2ZyIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm9jdGljb24gb2N0aWNvbi1naXQtY29tbWl0IiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgdmlld0JveDogIjAgMCAxNCAxNiIsCiAgICAgICAgICAgICAgICB2ZXJzaW9uOiAiMS4xIiwKICAgICAgICAgICAgICAgIHdpZHRoOiAiMTQiLAogICAgICAgICAgICAgICAgaGVpZ2h0OiAiMTYiLAogICAgICAgICAgICAgICAgImFyaWEtaGlkZGVuIjogInRydWUiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAiZmlsbC1ydWxlIjogImV2ZW5vZGQiLAogICAgICAgICAgICAgICAgICBkOgogICAgICAgICAgICAgICAgICAgICJNMTAuODYgN2MtLjQ1LTEuNzItMi0zLTMuODYtMy0xLjg2IDAtMy40MSAxLjI4LTMuODYgM0gwdjJoMy4xNGMuNDUgMS43MiAyIDMgMy44NiAzIDEuODYgMCAzLjQxLTEuMjggMy44Ni0zSDE0VjdoLTMuMTR6TTcgMTAuMmMtMS4yMiAwLTIuMi0uOTgtMi4yLTIuMiAwLTEuMjIuOTgtMi4yIDIuMi0yLjIgMS4yMiAwIDIuMi45OCAyLjIgMi4yIDAgMS4yMi0uOTggMi4yLTIuMiAyLjJ6IgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0KICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIlRpbWVsaW5lSXRlbS1ib2R5IiB9LCBbCiAgICAgICAgICBfdm0uX3YoIlxuMy4gUmljZXJjYSBlIEFuYWxpc2kgZGF0aS5cbiIpCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIlRpbWVsaW5lSXRlbSBUaW1lbGluZUl0ZW0tLWNvbmRlbnNlZCIgfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiVGltZWxpbmVJdGVtLWJhZGdlIiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgInN2ZyIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm9jdGljb24gb2N0aWNvbi1naXQtY29tbWl0IiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgdmlld0JveDogIjAgMCAxNCAxNiIsCiAgICAgICAgICAgICAgICB2ZXJzaW9uOiAiMS4xIiwKICAgICAgICAgICAgICAgIHdpZHRoOiAiMTQiLAogICAgICAgICAgICAgICAgaGVpZ2h0OiAiMTYiLAogICAgICAgICAgICAgICAgImFyaWEtaGlkZGVuIjogInRydWUiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAiZmlsbC1ydWxlIjogImV2ZW5vZGQiLAogICAgICAgICAgICAgICAgICBkOgogICAgICAgICAgICAgICAgICAgICJNMTAuODYgN2MtLjQ1LTEuNzItMi0zLTMuODYtMy0xLjg2IDAtMy40MSAxLjI4LTMuODYgM0gwdjJoMy4xNGMuNDUgMS43MiAyIDMgMy44NiAzIDEuODYgMCAzLjQxLTEuMjggMy44Ni0zSDE0VjdoLTMuMTR6TTcgMTAuMmMtMS4yMiAwLTIuMi0uOTgtMi4yLTIuMiAwLTEuMjIuOTgtMi4yIDIuMi0yLjIgMS4yMiAwIDIuMi45OCAyLjIgMi4yIDAgMS4yMi0uOTggMi4yLTIuMiAyLjJ6IgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0KICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIlRpbWVsaW5lSXRlbS1ib2R5IiB9LCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJcbjQuIENyZWF6aW9uZSBkZWkgcHJpbWkgbW9ja3VwIGUgd2lyZWZyYW1lIGUgYXBwcm92YXppb25lLlxuIgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJUaW1lbGluZUl0ZW0gVGltZWxpbmVJdGVtLS1jb25kZW5zZWQiIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIlRpbWVsaW5lSXRlbS1iYWRnZSIgfSwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJzdmciLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJvY3RpY29uIG9jdGljb24tZ2l0LWNvbW1pdCIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHZpZXdCb3g6ICIwIDAgMTQgMTYiLAogICAgICAgICAgICAgICAgdmVyc2lvbjogIjEuMSIsCiAgICAgICAgICAgICAgICB3aWR0aDogIjE0IiwKICAgICAgICAgICAgICAgIGhlaWdodDogIjE2IiwKICAgICAgICAgICAgICAgICJhcmlhLWhpZGRlbiI6ICJ0cnVlIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJwYXRoIiwgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgImZpbGwtcnVsZSI6ICJldmVub2RkIiwKICAgICAgICAgICAgICAgICAgZDoKICAgICAgICAgICAgICAgICAgICAiTTEwLjg2IDdjLS40NS0xLjcyLTItMy0zLjg2LTMtMS44NiAwLTMuNDEgMS4yOC0zLjg2IDNIMHYyaDMuMTRjLjQ1IDEuNzIgMiAzIDMuODYgMyAxLjg2IDAgMy40MS0xLjI4IDMuODYtM0gxNFY3aC0zLjE0ek03IDEwLjJjLTEuMjIgMC0yLjItLjk4LTIuMi0yLjIgMC0xLjIyLjk4LTIuMiAyLjItMi4yIDEuMjIgMCAyLjIuOTggMi4yIDIuMiAwIDEuMjItLjk4IDIuMi0yLjIgMi4yeiIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KQogICAgICAgICAgICBdCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJUaW1lbGluZUl0ZW0tYm9keSIgfSwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiXG41LiAgUHJvdG90aXBhemlvbmUgYWQgYWx0YSBkZWZpbml6aW9uZSB1c2FuZG8gd2lyZWZyYW1lcy5cbiIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiVGltZWxpbmVJdGVtIFRpbWVsaW5lSXRlbS0tY29uZGVuc2VkIiB9LCBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJUaW1lbGluZUl0ZW0tYmFkZ2UiIH0sIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAic3ZnIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAib2N0aWNvbiBvY3RpY29uLWdpdC1jb21taXQiLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICB2aWV3Qm94OiAiMCAwIDE0IDE2IiwKICAgICAgICAgICAgICAgIHZlcnNpb246ICIxLjEiLAogICAgICAgICAgICAgICAgd2lkdGg6ICIxNCIsCiAgICAgICAgICAgICAgICBoZWlnaHQ6ICIxNiIsCiAgICAgICAgICAgICAgICAiYXJpYS1oaWRkZW4iOiAidHJ1ZSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICJmaWxsLXJ1bGUiOiAiZXZlbm9kZCIsCiAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgIk0xMC44NiA3Yy0uNDUtMS43Mi0yLTMtMy44Ni0zLTEuODYgMC0zLjQxIDEuMjgtMy44NiAzSDB2MmgzLjE0Yy40NSAxLjcyIDIgMyAzLjg2IDMgMS44NiAwIDMuNDEtMS4yOCAzLjg2LTNIMTRWN2gtMy4xNHpNNyAxMC4yYy0xLjIyIDAtMi4yLS45OC0yLjItMi4yIDAtMS4yMi45OC0yLjIgMi4yLTIuMiAxLjIyIDAgMi4yLjk4IDIuMiAyLjIgMCAxLjIyLS45OCAyLjItMi4yIDIuMnoiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgXQogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiVGltZWxpbmVJdGVtLWJvZHkiIH0sIFsKICAgICAgICAgIF92bS5fdigiXG42LiBTdmlsdXBwbyBkZWxsZSB0ZWNub2xvZ2llIGZyb250LWVuZC5cbiIpCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIlRpbWVsaW5lSXRlbSBUaW1lbGluZUl0ZW0tLWNvbmRlbnNlZCIgfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiVGltZWxpbmVJdGVtLWJhZGdlIiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgInN2ZyIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm9jdGljb24gb2N0aWNvbi1naXQtY29tbWl0IiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgdmlld0JveDogIjAgMCAxNCAxNiIsCiAgICAgICAgICAgICAgICB2ZXJzaW9uOiAiMS4xIiwKICAgICAgICAgICAgICAgIHdpZHRoOiAiMTQiLAogICAgICAgICAgICAgICAgaGVpZ2h0OiAiMTYiLAogICAgICAgICAgICAgICAgImFyaWEtaGlkZGVuIjogInRydWUiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAiZmlsbC1ydWxlIjogImV2ZW5vZGQiLAogICAgICAgICAgICAgICAgICBkOgogICAgICAgICAgICAgICAgICAgICJNMTAuODYgN2MtLjQ1LTEuNzItMi0zLTMuODYtMy0xLjg2IDAtMy40MSAxLjI4LTMuODYgM0gwdjJoMy4xNGMuNDUgMS43MiAyIDMgMy44NiAzIDEuODYgMCAzLjQxLTEuMjggMy44Ni0zSDE0VjdoLTMuMTR6TTcgMTAuMmMtMS4yMiAwLTIuMi0uOTgtMi4yLTIuMiAwLTEuMjIuOTgtMi4yIDIuMi0yLjIgMS4yMiAwIDIuMi45OCAyLjIgMi4yIDAgMS4yMi0uOTggMi4yLTIuMiAyLjJ6IgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0KICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIlRpbWVsaW5lSXRlbS1ib2R5IiB9LCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJcbjcuIE1pZ2xpb3JhbWVudG8gZS9vIGNvcnJlemlvbmkgZGVzaWduIGRlbGxhIFVzZXIgSW50ZXJmYWNlLlxuIgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJUaW1lbGluZUl0ZW0gVGltZWxpbmVJdGVtLS1jb25kZW5zZWQiIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIlRpbWVsaW5lSXRlbS1iYWRnZSIgfSwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJzdmciLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJvY3RpY29uIG9jdGljb24tZ2l0LWNvbW1pdCIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHZpZXdCb3g6ICIwIDAgMTQgMTYiLAogICAgICAgICAgICAgICAgdmVyc2lvbjogIjEuMSIsCiAgICAgICAgICAgICAgICB3aWR0aDogIjE0IiwKICAgICAgICAgICAgICAgIGhlaWdodDogIjE2IiwKICAgICAgICAgICAgICAgICJhcmlhLWhpZGRlbiI6ICJ0cnVlIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJwYXRoIiwgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgImZpbGwtcnVsZSI6ICJldmVub2RkIiwKICAgICAgICAgICAgICAgICAgZDoKICAgICAgICAgICAgICAgICAgICAiTTEwLjg2IDdjLS40NS0xLjcyLTItMy0zLjg2LTMtMS44NiAwLTMuNDEgMS4yOC0zLjg2IDNIMHYyaDMuMTRjLjQ1IDEuNzIgMiAzIDMuODYgMyAxLjg2IDAgMy40MS0xLjI4IDMuODYtM0gxNFY3aC0zLjE0ek03IDEwLjJjLTEuMjIgMC0yLjItLjk4LTIuMi0yLjIgMC0xLjIyLjk4LTIuMiAyLjItMi4yIDEuMjIgMCAyLjIuOTggMi4yIDIuMiAwIDEuMjItLjk4IDIuMi0yLjIgMi4yeiIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KQogICAgICAgICAgICBdCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJUaW1lbGluZUl0ZW0tYm9keSIgfSwgWwogICAgICAgICAgX3ZtLl92KCJcbjguIFN2aWx1cHBvIGRlbGxlIHRlY25vbG9naWUgZGkgYmFja2VuZC5cbiIpCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIlRpbWVsaW5lSXRlbSBUaW1lbGluZUl0ZW0tLWNvbmRlbnNlZCIgfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiVGltZWxpbmVJdGVtLWJhZGdlIiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgInN2ZyIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm9jdGljb24gb2N0aWNvbi1naXQtY29tbWl0IiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgdmlld0JveDogIjAgMCAxNCAxNiIsCiAgICAgICAgICAgICAgICB2ZXJzaW9uOiAiMS4xIiwKICAgICAgICAgICAgICAgIHdpZHRoOiAiMTQiLAogICAgICAgICAgICAgICAgaGVpZ2h0OiAiMTYiLAogICAgICAgICAgICAgICAgImFyaWEtaGlkZGVuIjogInRydWUiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAiZmlsbC1ydWxlIjogImV2ZW5vZGQiLAogICAgICAgICAgICAgICAgICBkOgogICAgICAgICAgICAgICAgICAgICJNMTAuODYgN2MtLjQ1LTEuNzItMi0zLTMuODYtMy0xLjg2IDAtMy40MSAxLjI4LTMuODYgM0gwdjJoMy4xNGMuNDUgMS43MiAyIDMgMy44NiAzIDEuODYgMCAzLjQxLTEuMjggMy44Ni0zSDE0VjdoLTMuMTR6TTcgMTAuMmMtMS4yMiAwLTIuMi0uOTgtMi4yLTIuMiAwLTEuMjIuOTgtMi4yIDIuMi0yLjIgMS4yMiAwIDIuMi45OCAyLjIgMi4yIDAgMS4yMi0uOTggMi4yLTIuMiAyLjJ6IgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0KICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIlRpbWVsaW5lSXRlbS1ib2R5IiB9LCBbCiAgICAgICAgICBfdm0uX3YoIlxuOS4gVGVzdCBkZWxsYSBVc2VyIEV4cGVyaWVuY2UgZSBRQSBUZXN0aW5nLlxuIikKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiVGltZWxpbmVJdGVtIFRpbWVsaW5lSXRlbS0tY29uZGVuc2VkIiB9LCBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJUaW1lbGluZUl0ZW0tYmFkZ2UiIH0sIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAic3ZnIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAib2N0aWNvbiBvY3RpY29uLWdpdC1jb21taXQiLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICB2aWV3Qm94OiAiMCAwIDE0IDE2IiwKICAgICAgICAgICAgICAgIHZlcnNpb246ICIxLjEiLAogICAgICAgICAgICAgICAgd2lkdGg6ICIxNCIsCiAgICAgICAgICAgICAgICBoZWlnaHQ6ICIxNiIsCiAgICAgICAgICAgICAgICAiYXJpYS1oaWRkZW4iOiAidHJ1ZSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICJmaWxsLXJ1bGUiOiAiZXZlbm9kZCIsCiAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgIk0xMC44NiA3Yy0uNDUtMS43Mi0yLTMtMy44Ni0zLTEuODYgMC0zLjQxIDEuMjgtMy44NiAzSDB2MmgzLjE0Yy40NSAxLjcyIDIgMyAzLjg2IDMgMS44NiAwIDMuNDEtMS4yOCAzLjg2LTNIMTRWN2gtMy4xNHpNNyAxMC4yYy0xLjIyIDAtMi4yLS45OC0yLjItMi4yIDAtMS4yMi45OC0yLjIgMi4yLTIuMiAxLjIyIDAgMi4yLjk4IDIuMiAyLjIgMCAxLjIyLS45OCAyLjItMi4yIDIuMnoiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgXQogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiVGltZWxpbmVJdGVtLWJvZHkiIH0sIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlxuMTAuIFRlc3QgZSBjb2xsYXVkbyBkZWxsYSBhcHAgY29uIGlsIGNsaWVudGUgZSBwcmluY2lwYWxpIHN0YWtlaG9sZGVycy5cbiIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiVGltZWxpbmVJdGVtIFRpbWVsaW5lSXRlbS0tY29uZGVuc2VkIiB9LCBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJUaW1lbGluZUl0ZW0tYmFkZ2UiIH0sIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAic3ZnIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAib2N0aWNvbiBvY3RpY29uLWdpdC1jb21taXQiLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICB2aWV3Qm94OiAiMCAwIDE0IDE2IiwKICAgICAgICAgICAgICAgIHZlcnNpb246ICIxLjEiLAogICAgICAgICAgICAgICAgd2lkdGg6ICIxNCIsCiAgICAgICAgICAgICAgICBoZWlnaHQ6ICIxNiIsCiAgICAgICAgICAgICAgICAiYXJpYS1oaWRkZW4iOiAidHJ1ZSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICJmaWxsLXJ1bGUiOiAiZXZlbm9kZCIsCiAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgIk0xMC44NiA3Yy0uNDUtMS43Mi0yLTMtMy44Ni0zLTEuODYgMC0zLjQxIDEuMjgtMy44NiAzSDB2MmgzLjE0Yy40NSAxLjcyIDIgMyAzLjg2IDMgMS44NiAwIDMuNDEtMS4yOCAzLjg2LTNIMTRWN2gtMy4xNHpNNyAxMC4yYy0xLjIyIDAtMi4yLS45OC0yLjItMi4yIDAtMS4yMi45OC0yLjIgMi4yLTIuMiAxLjIyIDAgMi4yLjk4IDIuMiAyLjIgMCAxLjIyLS45OCAyLjItMi4yIDIuMnoiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgXQogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiVGltZWxpbmVJdGVtLWJvZHkiIH0sIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlxuMTEuIExhbmNpbyBkZWxsYSBhcHAgc3UgQXBwIFN0b3JlIChpT1MpIGFuZCBQbGF5IFN0b3JlIChBbmRyb2lkKS5cbiIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogIkNvdW50ZXIgYmctcmVkIHRleHQtd2hpdGUiIH0sIFsKICAgICAgICAgIF92bS5fdigiRmluZSIpCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAidGVhbSIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjdGVhbSIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIFRlYW0iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJJbCBUZWFtIGRpIFN2aWx1cHBvIMOoIGNvc3RpdHVpdG8gZGEgcHJvZmVzc2lvbmlzdGkgY2hlIGxhdm9yYW5vIHBlciBjb25zZWduYXJlIHVuIGluY3JlbWVudG8gZGkgcHJvZG90dG8gcG90ZW56aWFsbWVudGUgcmlsYXNjaWFiaWxlIGFsbGEgZmluZSBkaSBvZ25pICIKICAgICAgICAgICksCiAgICAgICAgICBfYygiVGVybSIsIHsgYXR0cnM6IHsgdGVybTogIml0ZXJhemlvbmUiLCBzaG93OiAiU3ByaW50IiB9IH0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiLiBTb2x0YW50byBpIG1lbWJyaSBkZWwgVGVhbSBkaSBTdmlsdXBwbyBjcmVhbm8gbOKAmWluY3JlbWVudG8uIEkgVGVhbSBkaSBTdmlsdXBwbyBzb25vIHN0cnV0dHVyYXRpIGUgYXV0b3JpenphdGkgcGVyIG9yZ2FuaXp6YXJlIGUgZ2VzdGlyZSBpbCBwcm9wcmlvIGxhdm9yby4gTGEgc2luZXJnaWEgcmlzdWx0YW50ZSBvdHRpbWl6emEgbOKAmWVmZmljaWVuemEgZSBs4oCZZWZmaWNhY2lhIGNvbXBsZXNzaXZlIGRlbCBUZWFtIGRpIFN2aWx1cHBvLiIKICAgICAgICAgICkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiSSBUZWFtIGRpIFN2aWx1cHBvIGhhbm5vIGxlIHNlZ3VlbnRpIGNhcmF0dGVyaXN0aWNoZToiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoIlNvbm8gYXV0by1vcmdhbml6emF0aS4gTmVzc3VubyAobmVhbmNoZSBsbyAiKSwKICAgICAgICAgIF9jKCJUZXJtIiwgeyBhdHRyczogeyB0ZXJtOiAic2NydW1fbWFzdGVyIiwgc2hvdzogIlNjcnVtX01hc3RlciIgfSB9KSwKICAgICAgICAgIF92bS5fdigiKSBkaWNlIGFsIFRlYW0gZGkgU3ZpbHVwcG8gY29tZSB0cmFzZm9ybWFyZSBpbCAiKSwKICAgICAgICAgIF9jKCJUZXJtIiwgeyBhdHRyczogeyB0ZXJtOiAiYmFja2xvZyIsIHNob3c6ICJQcm9kdWN0X0JhY2tsb2ciIH0gfSksCiAgICAgICAgICBfdm0uX3YoIiBpbiBJbmNyZW1lbnRpIGRpIGZ1bnppb25hbGl0w6AgcG90ZW56aWFsbWVudGUgcmlsYXNjaWFiaWxpOyIpCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSSBUZWFtIGRpIFN2aWx1cHBvIHNvbm8gY3Jvc3MtZnVuemlvbmFsaSwgY29uIHR1dHRlIGxlIGNvbXBldGVuemUgY29tZSB0ZWFtIG5lY2Vzc2FyaWUgcGVyIGNyZWFyZSB1biBJbmNyZW1lbnRvIGRpIHByb2RvdHRvOyIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIk5vbiBzaSByaWNvbm9zY2UgYWxjdW4gdGl0b2xvIGFpIG1lbWJyaSBkZWwgVGVhbSBkaSBTdmlsdXBwbywgaW5kaXBlbmRlbnRlbWVudGUgZGFsIGxhdm9ybyBlc2VndWl0byBkYWxsYSBwZXJzb25hOyIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIk5vbiDDqCBwcmVzZW50ZSBhbGN1biBzb3R0by10ZWFtIG5lbCBUZWFtIGRpIFN2aWx1cHBvLCBpbmRpcGVuZGVudGVtZW50ZSBkYWkgcGFydGljb2xhcmkgZG9taW5pIGFpIHF1YWxpIMOoIG5lY2Vzc2FyaW8gZGVkaWNhcnNpIGNvbWUgdGVzdCwgYXJjaGl0ZXR0dXJhLCBvcGVyYXRpb24gbyBhbmFsaXNpIGRpIGJ1c2luZXNzOyIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkkgc2luZ29saSBtZW1icmkgcG9zc29ubyBhdmVyZSBjb21wZXRlbnplIHNwZWNpYWxpc3RpY2hlIGUgYXJlZSBkaSBzcGVjaWFsaXp6YXppb25lLCBtYSBsYSByZXNwb25zYWJpbGl0w6AgZGV2ZSBlc3NlcmUgaW1wdXRhdGEgYWwgVGVhbSBkaSBTdmlsdXBwbyBuZWwgc3VvIGNvbXBsZXNzby4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJMYSBkaW1lbnNpb25lIG90dGltYWxlIGRlbCBUZWFtIGRpIFN2aWx1cHBvIMOoIGFiYmFzdGFuemEgcGljY29sYSBkYSByaW1hbmVyZSBhZ2lsZSBlIGFiYmFzdGFuemEgZ3JhbmRlIGRhIGNvbXBsZXRhcmUgdW4gbGF2b3JvIHNpZ25pZmljYXRpdm8gYWxs4oCZaW50ZXJubyBkZWxsbyAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoIlRlcm0iLCB7IGF0dHJzOiB7IHRlcm06ICJpdGVyYXppb25lIiwgc2hvdzogIlNwcmludCIgfSB9KSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIi4gQXZlcmUgbWVubyBkaSB0cmUgcGVyc29uZSBuZWwgVGVhbSBkaSBTdmlsdXBwbyBkaW1pbnVpc2NlIGzigJlpbnRlcmF6aW9uZSBlIGNvbXBvcnRhIHVuIG1pbm9yZSBndWFkYWdubyBpbiB0ZXJtaW5pIGRpIHByb2R1dHRpdml0w6AuIFRlYW0gZGkgU3ZpbHVwcG8gcGnDuSBwaWNjb2xpIHBvdHJlYmJlcm8gaW5jb250cmFyZSBsaW1pdGkgZG92dXRpIGFsbGEgbWFuY2FuemEgZGkgc2tpbGwgZHVyYW50ZSBsbyAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoIlRlcm0iLCB7IGF0dHJzOiB7IHRlcm06ICJpdGVyYXppb25lIiwgc2hvdzogIlNwcmludCIgfSB9KSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiwgY2hlIGltcGVkaXNjb25vIGxhIGNvbnNlZ25hIGRpIHVuIEluY3JlbWVudG8gcG90ZW56aWFsbWVudGUgcmlsYXNjaWFiaWxlLiBBdmVyZSBwacO5IGRpIG5vdmUgcGVyc29uZSBuZWwgVGVhbSBkaSBTdmlsdXBwbyByaWNoaWVkZSB1biBlY2Nlc3Npdm8gbGF2b3JvIGRpIGNvb3JkaW5hbWVudG8uIEkgVGVhbSBkaSBTdmlsdXBwbyBkaSBncmFuZGkgZGltZW5zaW9uaSBnZW5lcmFubyB0cm9wcGEgY29tcGxlc3NpdMOgIHJpc3BldHRvIGEgcXVlbGxhIGdlc3RpYmlsZSBkYSB1biBwcm9jZXNzbyBlbXBpcmljby4gSSBydW9saSBkZWwgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJUZXJtIiwgewogICAgICAgICAgICBhdHRyczogeyB0ZXJtOiAicHJvZHVjdF9vd25lciIsIHNob3c6ICJQcm9kdWN0X093bmVyIiB9CiAgICAgICAgICB9KSwKICAgICAgICAgIF92bS5fdigiIGUgZGVsbG8gIiksCiAgICAgICAgICBfYygiVGVybSIsIHsgYXR0cnM6IHsgdGVybTogInNjcnVtX21hc3RlciIsIHNob3c6ICJTY3J1bV9NYXN0ZXIiIH0gfSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgbm9uIHNvbm8gaW5jbHVzaSBuZWwgY29udGVnZ2lvLCBhIG1lbm8gY2hlIG5vbiBzdGlhbm8gZXNlZ3VlbmRvIGFuY2hlIGxvcm8gaWwgbGF2b3JvIGNvbnRlbnV0byBuZWxsbyAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoIlRlcm0iLCB7IGF0dHJzOiB7IHRlcm06ICJiYWNrbG9nIiwgc2hvdzogIlNwcmludF9CYWNrbG9nIiB9IH0pCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiZXNlbXBpby1kaS11bi10ZWFtLWRpLXN2aWx1cHBvIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNlc2VtcGlvLWRpLXVuLXRlYW0tZGktc3ZpbHVwcG8iIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBFc2VtcGlvIGRpIHVuIFRlYW0gZGkgU3ZpbHVwcG8uIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIkJveCBCb3gtLWNvbmRlbnNlZCAgbXktNiIgfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiQm94LXJvdyBkLWZsZXggZmxleC1pdGVtcy1jZW50ZXIiIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZmxleC1hdXRvIiB9LCBbCiAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJNYXJrIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1zbWFsbCB0ZXh0LWdyYXktbGlnaHQiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIlxuICAgICAgICBVWCBSZXNlYXJjaGVyXG4gICAgICAiKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIkJveC1yb3cgZC1mbGV4IGZsZXgtaXRlbXMtY2VudGVyIiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZsZXgtYXV0byIgfSwgWwogICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiQW5kcmV3IildKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1zbWFsbCB0ZXh0LWdyYXktbGlnaHQiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIlxuICAgICAgICBVSSBEZXNpZ25lclxuICAgICAgIikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJCb3gtcm93IGQtZmxleCBmbGV4LWl0ZW1zLWNlbnRlciIgfSwgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmbGV4LWF1dG8iIH0sIFsKICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIktodW4gbWFlIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJzcGFuIiwKICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiTGFiZWwgYmctZ3JheSB0ZXh0LWdyYXkgcHgtMiBmbG9hdC1yaWdodCIgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJGcm9udC1FbmQiKV0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1zbWFsbCB0ZXh0LWdyYXktbGlnaHQiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIlxuICAgICAgICBTb2Z0d2FyZSBFbmdpbmVlclxuICAgICAgIikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJCb3gtcm93IGQtZmxleCBmbGV4LWl0ZW1zLWNlbnRlciIgfSwgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmbGV4LWF1dG8iIH0sIFsKICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlBhd2FydXQiKV0pLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAic3BhbiIsCiAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIkxhYmVsIGJnLWdyYXkgdGV4dC1ncmF5IHB4LTIgZmxvYXQtcmlnaHQiIH0sCiAgICAgICAgICAgICAgW192bS5fdigiRmx1dHRlciIpXQogICAgICAgICAgICApLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXNtYWxsIHRleHQtZ3JheS1saWdodCIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigiXG4gICAgICAgIFNvZnR3YXJlIEVuZ2luZWVyXG4gICAgICAiKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIkJveC1yb3cgZC1mbGV4IGZsZXgtaXRlbXMtY2VudGVyIiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZsZXgtYXV0byIgfSwgWwogICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiTml0aXRob3JuIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJzcGFuIiwKICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiTGFiZWwgYmctZ3JheSB0ZXh0LWdyYXkgcHgtMiBmbG9hdC1yaWdodCIgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJRQSIpXQogICAgICAgICAgICApLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXNtYWxsIHRleHQtZ3JheS1saWdodCIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigiXG4gICAgICAgIFNvZnR3YXJlIEVuZ2luZWVyXG4gICAgICAiKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKQogICAgXQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}